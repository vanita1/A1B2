{
    "collab_server" : "",
    "contents" : "##'NAME\n#'name fars_read\n#'\n##'TITLE\n#'title read function\n#'#'@note\n#'fars_functions : Package for reading, summarising and create visual representation\n#'for data from the Fatality Analysis Reporting System (FARS).\n#'@note\n#'fars_read function reads the given file and convert resulting data frame\n#'to a table using tbl_df function from dplyr\n#'@details\n#': Function Checks the existence of given file. In case file is not found, a\n#'           message is generated. While reading the file,suppresses the progress\n#'           messages to have a clean output\n#'@examples \\dontrun{fars_read(\"accident_2015.csv.bz2\")}\n#'@import readr\n#'@importFrom dplyr tbl_df\n#'@importFrom testthat expect_that\n#'\n#'@param filename a string\n#'@return - Tibble object with csv file data\n#'@export\nfars_read <-\n  function(filename) {\n    with(filename,{\n    filename = NULL\n  if(!file.exists(filename))\n    stop(\"file '\", filename, \"' does not exist\")\n  data <- suppressMessages({\n    readr::read_csv(filename, progress = FALSE)\n  })\n  dplyr::tbl_df(data)\n    })}\n\n##'NAME\n#'name make_filename\n#'\n##'TITLE\n#'title function creates a custom file name based on year argument value\n#'@note make_filename function creates a custom file name based on year argument value\n#'@examples \\dontrun{make_filename(2015)}\n#'@param year numeric\n#'@return - character string having custom file name e.g.accident_2015.csv.bz2\n#'@export\nmake_filename <- function(year) {\n  year <- as.integer(year)\n  sprintf(\"accident_%d.csv.bz2\", year)\n}\n##'name\n#'name fars_read_years\n#'\n##'TITLE\n#'title function to iteratively read the files\n#'@note -fars_read_years function to iteratively read the files based on numeric year\n#'vector\n#'@examples \\dontrun{fars_read_years(c(2015,1980,2010))}\n#'@importFrom dplyr select\n#'@importFrom dplyr mutate\n#'@importFrom magrittr %>%\n#'@param years numeric\n#'@return - a list of tibbles each containing year and month columns. If files does not exist, returns NULL\n#'@export\nfars_read_years <- function(years) {\n  with(years,{\n  lapply(years, function(year) {\n    file <- make_filename(year)\n    tryCatch({\n      dat <- fars_read(file)\n      dplyr::mutate(dat, year = year) %>%\n        dplyr::select(MONTH, year)\n    }, error = function(e) {\n      warning(\"invalid year: \", year)\n      return(NULL)\n    })\n  })\n})}\n##'name\n#'name fars_summarize_years\n#'\n##'TITLE\n#'title combines files\n#'@note -fars_summarize_years combines multiple year files by rows and then group on year and month\n#' Further it calculates summary of the resulting data frame and spreads across year\n\n#'@param years numeric\n\n#'@return A wide format tibble. One column for year and a MONTH column. Each\n#' value is the count of observations in a year-month.\n\n#'@examples \\dontrun{fars_summarize_years(c(2013,2014,2015))}\n\n#'@importFrom dplyr bind_rows\n#'@importFrom dplyr group_by\n#'@importFrom dplyr summarize\n#'@importFrom tidyr spread\n#'@importFrom dplyr n\n#'@export\nfars_summarize_years <- function(years) {\n  with(years,{\n  dat_list <- fars_read_years(years)\n  dplyr::bind_rows(dat_list) %>%\n    dplyr::group_by(year, MONTH) %>%\n    dplyr::summarize(n = n()) %>%\n    tidyr::spread(year, n)\n})}\n##'name\n#'name fars_map_state\n#'\n##'TITLE\n#'title function to draw a map\n#'@note -fars_map_state- draw a map for a given year and state\n#'@details  #â€™  Function to check if there is data for a state in a particular year file. If data\n#'is present and plot longitude against latitude for observations where\n#' longitude is > 900 and latitude is >90\n#' Add Points to a Plot\n#'@param state.num numeric\n#'@param year numeric\n\n#'@return NULL\n\n#'@importFrom maps map\n#'@importFrom dplyr filter\n#'@importFrom graphics points\n#'@examples \\dontrun{fars_map_state(20,2015)}\n#'@export\nfars_map_state <- function(state.num, year) {\n  with(state.num,year,{\n  filename <- make_filename(year)\n  data <- fars_read(filename)\n  state.num <- as.integer(state.num)\n\n  if(!(state.num %in% unique(data$STATE)))\n    stop(\"invalid STATE number: \", state.num)\n  data.sub <- dplyr::filter(data, STATE == state.num)\n  if(nrow(data.sub) == 0L) {\n    message(\"no accidents to plot\")\n    return(invisible(NULL))\n  }\n  is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n  is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n  with(data.sub, {\n    maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n              xlim = range(LONGITUD, na.rm = TRUE))\n    graphics::points(LONGITUD, LATITUDE, pch = 46)\n  })\n})}\n",
    "created" : 1499529049320.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "543948818",
    "id" : "693F6FC2",
    "lastKnownWriteTime" : 1499530015,
    "last_content_update" : 1499530015399,
    "path" : "~/A1B1/R/A1B1.R",
    "project_path" : "R/A1B1.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}