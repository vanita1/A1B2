{
    "collab_server" : "",
    "contents" : "---\ntitle: \"A1B1\"\nauthor: \"VANITA\"\ndate: \"`r Sys.Date()`\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Vignette Title}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n#'@note\n#'fars_functions : Package for reading, summarising and create visual representation\n#'for data from the Fatality Analysis Reporting System (FARS). \n#'@note \n#'fars_read function reads the given file and convert resulting data frame \n#'to a table using tbl_df function from dplyr\n#'@details \n#': Function Checks the existence of given file. In case file is not found, a \n#'           message is generated. While reading the file,suppresses the progress\n#'           messages to have a clean output\n#'@examples - fars_read(\"accident_2015.csv.bz2\")\n#'@importFrom read_csv readr\n#'@importFrom tbl_df dplyr\n#'@parameter - filename : a character string with path of the file\n#'@return - Tibble object with csv file data\n#'@export\n#'\n\n```{r}\nfilename = \"accident_2013.csv.bz2\"\nfars_read <- function(filename) {\n        if(!file.exists(filename))\n                stop(\"file '\", filename, \"' does not exist\")\n        data <- suppressMessages({\n                readr::read_csv(filename, progress = FALSE)\n        })\n        dplyr::tbl_df(data)\n}  \n```\n\n#'@note make_filename function creates a custom file name based on year argument value\n#'@examples - make_filename(2015)\n#'@parameter - year- Numeric e.g. 2015\n#'@return - character string having custom file name e.g.accident_2015.csv.bz2\n#'@export\n#'\n\n```{r}\nmake_filename <- function(year) {\n        year <- as.integer(year)\n        sprintf(\"accident_%d.csv.bz2\", year)\n}\n```\n\n #'@note -fars_read_years function to iteratively read the files based on numeric year \n #'vector \n #'@examples - fars_read_years(c(2015,1980,2010))\n #'mportFrom select dplyr\n #'@importFrom mutate dplyr\n #'@importFrom %/% magrittr\n #'@parameter - a numeric vector contains years e.g. c(2015,2001,1980)\n #'@return - a list of tibbles each containing year and month columns. If files does not exist, returns NULL\n #'@export\n\n```{r}\nfars_read_years <- function(years) {\n        lapply(years, function(year) {\n                file <- make_filename(year)\n                tryCatch({\n                        dat <- fars_read(file)\n                        dplyr::mutate(dat, year = year) %>% \n                                dplyr::select(MONTH, year)\n                }, error = function(e) {\n                        warning(\"invalid year: \", year)\n                        return(NULL)\n                })\n        })\n}\n\n```\n\n #'@note -fars_summarize_years combines multiple year files by rows and then group on year and month\n #' Further it calculates summary of the resulting data frame and spreads across year\n\n #'@parameter - a numeric vector contains years e.g. c(2015,2001,1980)\n\n #'@return A wide format tibble. One column for year and a MONTH column. Each\n  #' value is the count of observations in a year-month.\n\n #'@examples - fars_read(\"accident_2015.csv.bz2\")\n\n #'@importFrom dplyr bind_rows\n #'@importFrom dplyr group_by\n #'@importFrom dplyr summarize\n #'@importFrom tidyr spread\n #'@export\n\n```{r}\nfars_summarize_years <- function(years) {\n        dat_list <- fars_read_years(years)\n        dplyr::bind_rows(dat_list) %>% \n                dplyr::group_by(year, MONTH) %>% \n                dplyr::summarize(n = n()) %>%\n                tidyr::spread(year, n)\n}\n```\n\n\n\n #'@note -fars_map_state- draw a map for a given year and state \n #'@details  #?  Function to check if there is data for a state in a particular year file. If data\n #'is present and plot longitude against latitude for observations where \n #' longitude is > 900 and latitude is >90\n #' Add Points to a Plot\n #'@parameter-a vector containing statenumber and year or state and year e.g. fars_map_state(20,2015)\n\n #'@return NULL\n \n #'@importFrom maps map\n #'@importFrom graphics points\n\n #'@export\n #'@examples   fars_map_state(20,2015)\n\n```{r}\nfars_map_state <- function(state.num, year) {\n        filename <- make_filename(year)\n        data <- fars_read(filename)\n        state.num <- as.integer(state.num)\n\n        if(!(state.num %in% unique(data$STATE)))\n                stop(\"invalid STATE number: \", state.num)\n        data.sub <- dplyr::filter(data, STATE == state.num)\n        if(nrow(data.sub) == 0L) {\n                message(\"no accidents to plot\")\n                return(invisible(NULL))\n        }\n        is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n        is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n        with(data.sub, {\n                maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n                          xlim = range(LONGITUD, na.rm = TRUE))\n                graphics::points(LONGITUD, LATITUDE, pch = 46)\n        })\n}\n```\n",
    "created" : 1499502719952.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1837820180",
    "id" : "99898868",
    "lastKnownWriteTime" : 1499502845,
    "last_content_update" : 1499502845645,
    "path" : "~/A1B1/vignettes/vig1.Rmd",
    "project_path" : "vignettes/vig1.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}